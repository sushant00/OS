diff -Nur linux-3.13/arch/x86/syscalls/syscall_64.tbl linux-3.13-nillsus00/arch/x86/syscalls/syscall_64.tbl
--- linux-3.13/arch/x86/syscalls/syscall_64.tbl	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13-nillsus00/arch/x86/syscalls/syscall_64.tbl	2018-02-11 13:41:39.125447058 +0530
@@ -320,6 +320,7 @@
 311	64	process_vm_writev	sys_process_vm_writev
 312	common	kcmp			sys_kcmp
 313	common	finit_module		sys_finit_module
+314	common	sh_task_info		sys_sh_task_info
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff -Nur linux-3.13/include/linux/syscalls.h linux-3.13-nillsus00/include/linux/syscalls.h
--- linux-3.13/include/linux/syscalls.h	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13-nillsus00/include/linux/syscalls.h	2018-02-11 13:42:24.401447991 +0530
@@ -847,4 +847,5 @@
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_sh_task_info(int input_pid, char *filename);
 #endif
diff -Nur linux-3.13/kernel/sys.c linux-3.13-nillsus00/kernel/sys.c
--- linux-3.13/kernel/sys.c	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13-nillsus00/kernel/sys.c	2018-02-11 13:41:12.069446500 +0530
@@ -12,6 +12,9 @@
 #include <linux/prctl.h>
 #include <linux/highuid.h>
 #include <linux/fs.h>
+#include <linux/fcntl.h>
+#include <linux/module.h>
+#include <linux/device.h>
 #include <linux/kmod.h>
 #include <linux/perf_event.h>
 #include <linux/resource.h>
@@ -114,6 +117,44 @@
 EXPORT_SYMBOL(fs_overflowuid);
 EXPORT_SYMBOL(fs_overflowgid);
 
+SYSCALL_DEFINE2(sh_task_info, int, input_pid, char *, filename){
+	struct pid *pid_struct;
+	struct task_struct *task;
+	struct file *file;
+	char buff[400];
+	loff_t pos = 0;
+	mm_segment_t oldfs;
+	int len, ret;
+	pid_struct = find_get_pid(input_pid);
+	if(pid_struct == NULL)
+		return -ESRCH;
+	else
+	{
+		task = pid_task(pid_struct, PIDTYPE_PID);
+		if(task == NULL)
+			return -ESRCH;
+		oldfs = get_fs();
+		set_fs(get_ds());
+		file = filp_open(filename, O_WRONLY | O_TRUNC, 0644);
+		if(IS_ERR(file))
+		{
+			printk("%ld\n", PTR_ERR(file));
+			return -ENOENT;
+		}
+		len = sprintf(buff, "Task name: %s\nTask pid: %d\nTask state: %ld\nTask flags: %d \n", task->comm, input_pid, task->state, task->flags);
+		ret = vfs_write(file, buff, len, &pos);
+		if(ret == -1)
+			return -EACCES;
+		len = sprintf(buff, "Task ptrace: %d\nTask exit_state: %d\nTask personality: %d\n", task->ptrace, task->exit_state, task->personality);
+		ret = vfs_write(file, buff, len, &pos);
+		if(ret == -1)
+			return -EACCES;
+		filp_close(file, NULL);
+		set_fs(oldfs);
+		printk("Task name: %s\nTask pid: %d\nTask state: %ld\nTask flags: %d \nTask ptrace: %d\nTask exit_state: %d\nTask personality: %d\n", task->comm, input_pid, task->state, task->flags, task->ptrace, task->exit_state, task->personality);
+	}
+	return 0;
+}
 /*
  * Returns true if current's euid is same as p's uid or euid,
  * or has CAP_SYS_NICE to p's user_ns.
