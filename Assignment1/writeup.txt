Nilay Sanghvi 			2016063
Sushant Kumar Singh 	2016103

Description:

We followed the following steps:
	1. Setup virtual machine with Ubuntu 14.04 LTS server running kernel version 3.13.0.24-generic

	2. Downloaded same kernel source as currently running using
		apt-get source linux-image-$(uname -r)

	3. The source was extracted automatically by dpkg-dev on running the previous command and we observed that the diff file(that was downloaded automatically using the above command) was also applied to the extraced kernel source.

	4. Configured the kernel,
		for this we first copied the configuration from running kernel by using following
			cp /boot/config-$(uname -r) .config
		next we used make to configure using old configurations
			make oldconfig

	5. added the implementation of sh_task_info system call in kernel/sys.c

	6. added the entry corresponding to the syscall in 
		arch/x86/syscalls/syscall_64.tbl
		
	7. added the header corresponding to the syscall in
		include/linux/syscalls.h

	7. next we compiled the kernel to see the changes
		before compiling we changed make file and added EXTRAVERSION string, then used
			make
			make modules_install
			make install

	8. rebooted the os, with new kernel and tested the syscall


Implementation of Syscall:
	
	It first searches the 'pid_struct' corresponding to the given PID 'input_pid' using 'find_get_pid(PID)'. 
	If the search result is NULL that means no such process was found and function returns with error code 'ESRCH'.
	Else we find the 'task_struct' associated with the process using 'pid_task()'.
	First we change the address space from user space to Kernel space using 'get_fs()' to save the previous space, 'set_fs(KERNEL_DS)' to set to kernel space, where KERNEL_DS is for kernel data segment.
	It then opens the file 'filename' with flag 'O_WRONLY | O_TRUNC' to open file in write only mode and to overwrite if file already exists. Note- only sudo has access to write to the file. 
	If any error occurs while opening the file appropriate error code is returned.
	It then writes the info (formated using 'sprintf') stored in 'task_struct' to the file.
	The opened file is then closed and system call returns after setting the older space i.e. user space





Syscall:

NAME

	sh_task_info - print process task struct


SYNOPSIS

	int sh_task_info(int input_pid, char *filename)


DESCRIPTION
	
	sh_task-info() prints all the feilds corresponding to the task_struct of the process specified by its id in 'input_pid' and writes the same to the file specified by name 'filename'

ARGUMENTS
	
	input_pid	int 	the process ID(PID) of the process whose info is printed and written to file

	filename	char *	name of the file where the info of process is written, if 'filename' doesn't exist ENOENT is returned,
						if access (write access) to 'filename' is denied EACCES is returned

OUTPUT
		
	The info of the process with PID input_pid stored in task_struct of the process is printed and written to file 'filename'

RETURN VALUE
	
	On success, 0 is returned. On error negative value is returned, corresponding to the error no.


ERRORS
	
	following errors are handled by sh_task_info()

	ESRCH	Cannot find any process associated with PID 'input_pid'

	EACCES	Access to file 'filename' is not allowed

	ENOENT	file 'filename' does not exist




Testing:
	
	(First patch using the patch file using 'patch -p0 < mykernel.patch' and compile the new kernel)
	Test file 'test.c' makes the system call and prints error code and return value to the console
	
	Run the test.c file to test the implementation of sh_task_info
	1. create a file "abc.txt" and run the test (syscall returns 0 and runs successfully)
	2. delete "abc.txt" and run the test file. (error due to non existent file)




Sources:
	
	Linux Kernel Development by R Love
	Medium.com
	brennan.io
	ytliu.info
